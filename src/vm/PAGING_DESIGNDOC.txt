+-----------------------------------+
                    |              CS 301               |
                    | PROJECT 3: VIRTUAL MEMORY - PAGING|
                    |          DESIGN DOCUMENT          |
                    +-----------------------------------+


---- GROUP ----
Abhishek Yawalkar <abhishek.gy@iitgn.ac.in>
Ishan Prayagi <sunil.pi@iitgn.ac.in>
Meet Thumar <thumar.m@iitgn.ac.in>


---- PRELIMINARIES ----


>> If you have any preliminary comments on your submission, notes for 
>> the TAs or extra credit, please give them here.


>> Please cite any offline or online sources you consulted while
>> preparing your submission other than the Pintos documentation, course
>> text, lecture notes, and course staff.


                        PAGE TABLE MANAGEMENT
                        =====================


---- DATA STRUCTURES ----


>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.


>> thread.h
 new declared variables in `struct thread`, using a hash data structure
  
struct hash sp;
 
>> page.h 
new struct declared to access supplemental page table entry parameters


  struct sp_entry{
    enum spe_type type;
    void* uv_add;
    bool can_write;
    bool loaded;
    bool pinned;


    struct file* file;
    size_t offset;
    size_t read_bytes;
    size_t zero_bytes;
    size_t swap_index;
    struct hash_elem elem;
  };
 
>> frame.h 
lock and a new struct declared to access frame table entry parameters


  struct lock ft_mutex;
  struct list ft;
  struct ft_entry {
      struct list_elem elem;
      void *frame;
      struct thread *thread;
      struct sp_entry *spe;
  };
  




---- ALGORITHMS ----
>> A2: In a few paragraphs, describe your code for accessing the data
>> stored in the SPT about a given page.


>>We have two map structures to manage our virtual memory, the frame table to track the physical pages and the supplementary page table to track the virtual pages. We get the kernel virtual address (frame) from the page, the user virtual address of the data, if it is mapped in the user process’s page directory. If no frame is mapped to a given page, to find the spe, the user's virtual address is rounded down to its appropriate memory page and hashed. A new frame is being allocated or evicted by calling frame_alloc and then install_page maps the virtual address to the physical frame address. If the address is from a swap, then the data is read from swap partition, else it is read from the file.


>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively, how do you avoid the issue?


>> For validating in page_fault and check_address, the kernel is not using the kernel virtual address as the user virtual address. After the supplemental page table is looked up following, it is loaded after validating.






---- SYNCHRONIZATION ----


>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?


>> To avoid these situations, a ft_mutex lock is needed to allocate or evict the frame, which prevents two users to allocate/evicting frames at the same time. 






---- RATIONALE ----


>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?


>> ft_entry
 spe: declared to know, if a frame has been evicted or is still being allocated


>> sp_entry
uv_add: only the user's virtual address will be used in the kernel
loaded: To know whether the user page is already loaded or not




                       PAGING TO AND FROM DISK
                       =======================


---- DATA STRUCTURES ----


>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.


>> For swapping, added lock and bitmap data structure 


struct lock swap_mutex;
struct block *swap_block;
struct bitmap *swap_bmap;


---- ALGORITHMS ----


>> B2: When a frame is required, but none is free, some frame must be
>> evicted. Describe your code for choosing a frame to evict.


>> When the access bit is true, we swap it out while iterating through the frame list. If not, the stack page will be swapped out or, if it is a page, written to a file, depending on its kind. The swap index will be set, and free sectors will be scanned and written to during swapping out. The memory will now be released, and the user's virtual address will be invalidated. At the conclusion, palloc_get_page() is invoked.




>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?


>> A frame will be freed after the eviction, and the previous frame will be lost. There’s doubt regarding the fairness of this method as the spe and thread are updated to the new one in the new frame. 






---- SYNCHRONIZATION ----


>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)


>> When a user's virtual address from a supplemental page table entry is accessed through a page fault or syscall, the spe’s pinned flag of the item is set to true. The frame eviction algorithm ignores true pinned flag entries. Consequently, they won't be evicted. When the kernel no longer accesses the user data, the flag is again set to False.




>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?


>> In page_fault and syscalls, the process Q sets the spe's pinned flag of the memory it is accessing to true. Q's frame won't be taken into account by process P when it iterates over the frame table until Q ends the page fault or syscall. The loaded flag is then set to FALSE when P attempts to evict the frame, forcing Q to reload the page in order to fault the page back in. Race problems, such as evicting a frame while the kernel is accessing it, are avoided by using page faults. 




>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by, e.g. attempting to evict the frame while it is
>> still being read in?


>> When Process P loads the page, the spe will be pinned. Thus, because the frame is pinned, Q is unable to remove it while iterating. If Q begins to evict the frame and P pins and loads it later, Q will complete the eviction, and P will page fault.




>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?


>> The system call manually loads the unloaded pages, which are then get pinned. This will stop its eviction, although it still has the potential to do this. The page fault enables the kernel to fault user pages too. In the event that the virtual address is invalid, the user process will exit with a value of -1.


---- RATIONALE ----


>> B9: A single lock for the whole VM system would make
>> synchronization easy, but limit parallelism.  On the other hand,
>> using many locks complicates synchronization and raises the
>> possibility of deadlock but allows for high parallelism.  Explain
>> where your design falls along this continuum and why you chose to
>> design it this way.


>>  We used a boolean with race condition detection through the usage of page faults in order to use parallelism while avoiding deadlock. However, there are situations in which our design will not work, but we discovered it to be a tradeoff between deadlocks and parallelism.